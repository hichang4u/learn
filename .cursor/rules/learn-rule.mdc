---
description: LEARN 프로젝트 규칙
globs: *.py,*html,*js,*css
---
# LEARN 프로젝트 규칙

## 1. 파일 구조

### 1.1 백엔드 구조

```
app/
├── core/              # 핵심 설정 및 유틸리티
│   ├── config.py     # 환경 설정
│   ├── database.py   # 데이터베이스 설정
│   ├── auth.py       # 인증 관련 유틸리티
│   └── middleware.py # 미들웨어
├── models/           # 데이터베이스 모델
├── schemas/          # Pydantic 모델
├── routers/          # API 라우터
└── dependencies.py   # 의존성 주입
```

### 1.2 프론트엔드 구조

```

frontend/

├── static/           # 정적 파일

│   ├── css/         # 스타일시트

│   │   ├── base.css     # 기본 스타일

│   │   ├── layout.css   # 레이아웃 스타일

│   │   └── components/  # 컴포넌트별 스타일

│   ├── js/          # 자바스크립트

│   │   ├── api/        # API 호출 관련

│   │   ├── utils/      # 유틸리티 함수

│   │   └── components/ # 컴포넌트 관련 스크립트

│   └── img/         # 이미지 파일

├── templates/        # HTML 템플릿

│   ├── base.html        # 기본 템플릿

│   ├── layout/          # 레이아웃 템플릿

│   │   ├── header.html

│   │   ├── footer.html

│   │   └── sidebar.html

│   ├── components/      # 재사용 가능한 컴포넌트

│   │   ├── forms/

│   │   ├── modals/

│   │   └── alerts/

│   └── pages/          # 페이지별 템플릿

│       ├── auth/       # 인증 관련 페이지

│       ├── admin/      # 관리자 페이지

│       └── user/       # 사용자 페이지

```



### 1.3 프론트엔드 규칙

#### CSS 규칙

- BEM 방법론 사용

- 반응형 디자인 필수

- 변수는 :root에 정의

- 미디어 쿼리는 mobile-first 방식



#### JavaScript 규칙

- ES6+ 문법 사용

- async/await 사용

- 이벤트 위임 패턴 사용

- 모듈화 필수



#### 템플릿 규칙

- 컴포넌트 기반 설계

- 중복 코드 최소화

- 시맨틱 태그 사용

- 접근성 고려


## 2. 의존성 주입 규칙

### 2.1 데이터베이스 세션 관리
- 모든 요청에서 새로운 세션 생성
- 요청 종료 시 자동으로 세션 닫기
- 트랜잭션 자동 롤백 (예외 발생 시)

### 2.2 사용자 인증 의존성
#### get_current_user_or_none
- 세션에서 user_id 확인
- 로그인하지 않은 경우 None 반환
- 비활성 사용자는 None 반환
- 실제 사용자 객체 반환

#### login_required
- API 요청: 401 Unauthorized 반환
- 웹 페이지: /login으로 리다이렉트
- 활성 사용자만 접근 가능

#### admin_required
- 로그인 필수
- 관리자 권한 확인 (is_superuser)
- 권한 없는 경우 403 Forbidden

### 2.3 에러 처리
- 401: 인증되지 않은 사용자
- 403: 권한 없는 사용자
- 307: 로그인 페이지로 리다이렉트

### 2.4 보안 규칙
- 세션 기반 인증
- CSRF 토큰 검증
- 관리자 권한 엄격한 검증

## 3. 인증 규칙

### 3.1 비밀번호 정책
- 최소 8자 이상
- 대문자 1개 이상 포함
- 소문자 1개 이상 포함
- 숫자 1개 이상 포함
- 특수문자 1개 이상 포함 (!@#$%^&*()_+-=[]{}|;:,.<>?)

### 3.2 세션 정책
- 세션 기반 인증 사용
- 세션 만료 시간: 기본 30분
- 세션 저장소: Redis 사용
- 세션 ID: 암호화된 쿠키로 전송
- 세션 갱신: 활동 시 자동 연장

### 3.3 세션 보안
- 세션 하이재킹 방지
  - Secure 플래그 사용
  - HttpOnly 플래그 사용
  - SameSite=Strict 설정
- CSRF 토큰 필수
- IP 바인딩 (선택)
- 동시 세션 제한 (선택)

### 3.4 사용자 상태
- is_active: 활성화 여부
- is_approved: 관리자 승인 여부
- is_superuser: 관리자 권한 여부

### 3.5 인증 절차
1. 로그인 시도 (/api/auth/login)
2. 이메일/비밀번호 검증
3. 세션 생성 및 저장
4. 세션 ID를 쿠키로 전송
5. 요청마다 세션 검증
6. 사용자 활성화/승인 상태 확인

### 3.6 세션 관리
- 로그인 시 세션 생성
- 로그아웃 시 세션 삭제
- 비활성 세션 자동 정리
- 강제 로그아웃 지원
- 세션 데이터 암호화

### 3.7 클라이언트 구현
- 모든 API 요청에 credentials: 'include' 설정
- 세션 만료 시 자동 로그아웃
- 권한 없는 페이지 접근 차단
- 에러 처리 및 사용자 피드백
- 리다이렉션 처리

### 3.8 오류 처리
- 401: 세션 없음 또는 만료
- 403: 권한 부족
- 400: 잘못된 요청
- 500: 서버 오류
- 사용자 친화적 오류 메시지

### 3.9 모니터링 및 로깅
- 세션 생성/삭제 로깅
- 인증 시도 로깅
- 비정상 접근 탐지
- 동시 접속 모니터링
- 세션 상태 모니터링